/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package odev3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;



public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        Logger logger=LogManager.getLogger(App.class);
        logger.error("hello world");



        get("/", (req, res) -> "Odev3");

        get("/compute",
        (rq, rs) -> {
             Map<String, String> map = new HashMap<String, String>();
             map.put("result", "not computed yet!");
             return new ModelAndView(map, "compute.mustache");
        },
        new MustacheTemplateEngine()
        );

        post("/compute", (req, res) -> {

            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            while (sc1.hasNext())
            {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
            }
            sc1.close();
            System.out.println(inputList);
            String input2 = req.queryParams("input2").replaceAll("\\s","");
            int input2AsInt = Integer.parseInt(input2);
            String input3 = req.queryParams("input3").replaceAll("\\s","");
            int input3AsInt = Integer.parseInt(input3);
            String input4 = req.queryParams("input4").replaceAll("\\s","");

            boolean result = App.eleman_karsilastir(inputList, input2AsInt,input3AsInt,input4);


            Map<String, Boolean> map = new HashMap<String, Boolean>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");

            },
            new MustacheTemplateEngine()
            );




    }

    public static boolean eleman_karsilastir(ArrayList<Integer> array, int index, int index2, String sembol){
        boolean cikti=false;
        if((array.size()<=index) || (array.size()<=index2)){

        }
        else{
            if(sembol.equals(">")){
                if(array.get(index)>=array.get(index2)){
                    cikti=true;
                }
                else{
                    cikti=false;
                }
                
            }
            else if(sembol.equals("<")){
                if(array.get(index)<array.get(index2)){
                    cikti=true;
                }
                else{
                    cikti=false;
                }
            }
            

        }

        return cikti;
    }
}
